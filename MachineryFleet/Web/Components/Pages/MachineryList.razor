@page "/machines"
@rendermode InteractiveServer
@using MachineryFleet.Core.Entities
@using MachineryFleet.Core.Services
@inject IMachineService MachineService

@if (Machines is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="machine-list-container">
        <h3>Machines</h3>
        <button class="btn btn-primary mb-3" @onclick="AddMachine">Add Machine</button>
        <table class="table table-striped">
            <thead>
                <tr>
                    <th>Name</th>
                    <th>ID</th>
                    <th>Status</th>
                    <th>Latest Data</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var machine in Machines)
                {
                    <tr>
                        <td>@machine.Name</td>
                        <td>@machine.Id</td>
                        <td>@machine.Status</td>
                        <td>@machine.LogEntries?.LastOrDefault()</td>
                        <td>
                            <button class="btn btn-success" @onclick="() => StartMachine(machine.Id)">Start</button>
                            <button class="btn btn-danger" @onclick="() => StopMachine(machine.Id)">Stop</button>
                            <button class="btn btn-secondary" @onclick="() => SendData(machine.Id)">Send Data</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

@code {
    private IList<Machine>? Machines;
    private string ErrorMessage { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadMachines();
    }

    private async Task LoadMachines()
    {
        Machines = await MachineService.GetAllAsync() as IList<Machine>;
        await Task.CompletedTask;
    }

    private Task AddMachine()
    {

        // Logic to add a new machine
        
        return Task.CompletedTask;
    }

    private async Task StartMachine(Guid machineId)
    {
        Machine? machine;

        try
        {
            machine = await MachineService.GetAsync(machineId);
        }
        catch (InvalidOperationException ex)
        {
            ErrorMessage = ex.Message;
            return;
        }

        if (machine is null)
        {
            ErrorMessage = $"The machine with ID `{machineId}` does not exist.";
            return;
        }

        if (machine.Status == MachineStatus.Online)
        {
            try
            {
                await MachineService.StartAsync(machineId);
                await MachineService.AddLogEntryAsync(machineId, $"Machine {machine.Name} `{machine.Id}` started.");
            }
            catch(InvalidOperationException ex)
            {
                ErrorMessage = ex.Message;
                return;
            }
        }
        else
        {
            ErrorMessage = $"The machine {machine.Name} with ID `{machineId}` is already online.";
            return;
        }

        ErrorMessage = string.Empty;

        await Task.CompletedTask;
    }

    private async Task StopMachine(Guid machineId)
    {
        Machine? machine;

        try
        {
            machine = await MachineService.GetAsync(machineId);
        }
        catch (InvalidOperationException ex)
        {
            ErrorMessage = ex.Message;
            return;
        }

        if (machine is null)
        {
            ErrorMessage = $"The machine with ID `{machineId}` does not exist.";
            return;
        }

        if (machine.Status == MachineStatus.Offline)
        {
            try
            {
                await MachineService.StopAsync(machineId);
                await MachineService.AddLogEntryAsync(machineId, $"Machine {machine.Name} `{machine.Id}` stopped.");
            }
            catch (InvalidOperationException ex)
            {
                ErrorMessage = ex.Message;
                return;
            }
        }
        else
        {
            ErrorMessage = $"The machine {machine.Name} with ID `{machineId}` is already offline.";
            return;
        }

        ErrorMessage = string.Empty;

        // Logic to stop a machine
        await Task.CompletedTask;
    }

    private async Task SendData(Guid machineId)
    {
        // Logic to send data to a machine
        await Task.CompletedTask;
    }
}
