@page "/SchoolDirectory"
@attribute [Authorize(Policy = ApplicationPolicy.RequireTeacherRole)]
@using Microsoft.AspNetCore.Authorization
@using RoboUnicornsLMS.Services
@inject IApplicationUserRequestService ApplicationUserRequestService
@rendermode InteractiveServer

<div class="container">
    <div class="row align-items-center mb-3">
        <div class="col">
            <NavLink class="nav-link" href="CreateUser">
                <span class="add-course"> <i class="bi bi-plus-circle"></i>New user</span>
            </NavLink>
        </div>
        <div class="col text-center">
            <h2>School Directory</h2>
        </div>
        <div class="col"></div>
    </div>
</div>

<table class="table table-striped table-dark">
    <thead>
    <tr>
        <th scope="col">First name</th>
        <th scope="col">Last name</th>
            <th scope="col">Email</th>
            <th scope="col"></th>
            <th scope="col"></th>
            <th scope="col"></th>

    </tr>
    </thead>
    <tbody>
    @foreach (User u in users)
    {
        <tr>
            <td>
                <p>@u.FirstName</p>
            </td>
            <td>
                <p>@u.LastName</p>
            </td>
                <td>
                    <p>@u.Email</p>
                </td>
                <td>
                    <p>@u.Course</p>
                </td>
                <td style="width: 80px">
                    <a href="@($"useredit/{u.Id}")" class="btn btn-primary">Edit</a>
                </td>
                <td style="width: 100px">
                    <button type="button" class="btn btn-danger" @onclick="() => OpenDeleteDialog(u.Id, u.FirstName, u.LastName)">Delete</button>
                </td>
        </tr>
    }
    </tbody>
</table>

<ConfirmationDialog @ref="DeleteDialog" ConfirmedChanged="ConfirmDelete_Click"
                    ConfirmationTitle="Delete user?"
                    ConfirmationMessage=@($"Are you sure you want to delete {UserNameToDelete}?") />

@code {

    private IEnumerable<ApplicationUser> users = new List<ApplicationUser>();
    private ConfirmationDialog DeleteDialog;
    private string UserIdToDelete;
    private string UserNameToDelete;
    public string courseTitle = "Loading...";

    protected override async Task OnInitializedAsync()
    {
        users = await ApplicationUserRequestService.GetAsync();
    }

    private void OpenDeleteDialog(string userId, string firstName, string lastName)
    {
        UserIdToDelete = userId;
        UserNameToDelete = $"{firstName} {lastName}";
        DeleteDialog.ShowDialog();
    }

    private async Task ConfirmDelete_Click(bool confirmed)
    {
        if (confirmed)
        {
            try
            {
                var response = await ApplicationUserRequestService.DeleteAsync(UserIdToDelete);
                if (response.IsSuccessStatusCode)
                {
                    // Remove the user from the list
                    var user = users.FirstOrDefault(u => u.Id == UserIdToDelete);
                    if (user != null)
                    {
                        var temp = users.ToList();
                        temp.Remove(user);
                        users = temp;
                    }
                }
                else
                {
                    // Handle failure
                    Console.WriteLine($"Error deleting user: {response.ReasonPhrase}");
                }
            }
            catch (Exception ex)
            {
                // Handle exception
                Console.WriteLine($"Exception deleting user: {ex.Message}");
            }
        }
    }



}
