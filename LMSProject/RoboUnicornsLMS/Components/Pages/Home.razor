@page "/"
@using LMS.api.Model
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Identity
@using RoboUnicornsLMS.Services
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserManager<ApplicationUser> UserManager
@inject NavigationManager NavigationManager
@inject HttpClient HttpClient
@inject IActivityRequestService ActivityRequestService
@inject ICourseRequestService CourseRequestService
@inject IModuleRequestService ModuleRequestService
@inject IApplicationUserRequestService UserRequestService

<PageTitle>Home</PageTitle>

@code {
    private string userName = "";
    private IEnumerable<string> userRoles = new List<string>();
    private IEnumerable<ApplicationUser> Users = new List<ApplicationUser>();
    private IEnumerable<Activity> Activities = new List<Activity>();
    private IEnumerable<Course> Courses = new List<Course>();
    private IEnumerable<Module> Modules = new List<Module>();

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity?.IsAuthenticated ?? false)
        {
            userName = user.Identity.Name;
            var appUser = await UserManager.FindByNameAsync(userName);
            if(appUser != null) {
            userRoles = await UserManager.GetRolesAsync(appUser);
            }
        
        }
        else
        {
            NavigationManager.NavigateTo("/account/login");
        }

        // Users = await UserRequestService.GetAsync();
        // Activities = await ActivityRequestService.GetAsync();
        // Courses = await CourseRequestService.GetAsync();
        // Modules = await ModuleRequestService.GetAsync();
    }
}

@if (userName != "")
{
    <h1>Hello, @userName!</h1>
    <p>Welcome to your new app.</p>
    if (userRoles.Any())
    {
        <p>Your roles: @string.Join(", ", userRoles)</p>
    }
}

@* @if (Users != null && Users.Any())
{
    <h2>Users</h2>
    <table class="table table-striped table-dark">
        <thead>
            <tr>
                <th scope="col">Id</th>
                <th scope="col">UserName</th>
                <th scope="col">Email</th>
                <th scope="col">PhoneNumber</th>
                <th scope="col">Roles</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var user in Users.Take(10))
            {
                <tr>
                    <td>@user.Id</td>
                    <td>@user.UserName</td>
                    <td>@user.Email</td>
                    <td>@user.PhoneNumber</td>
                    <td>@string.Join(", ", user.Roles.Select(r => r.Name))</td>
                </tr>
            }
        </tbody>
    </table>
    <NavLink class="btn btn-primary" href="UserAdd">Create User</NavLink>
    <NavLink class="btn btn-primary" href="UserEdit">Edit User</NavLink>
    <NavLink class="btn btn-primary" href="UserDelete">Delete User</NavLink>
}

@if (Activities != null && Activities.Any())
{
    <h2>Activities</h2>
    <table class="table table-striped table-dark">
        <thead>
            <tr>
                <th scope="col">Id</th>
                <th scope="col">Name</th>
                <th scope="col">Description</th>
                <th scope="col">Start</th>
                <th scope="col">End</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var activity in Activities.Take(10))
            {
                <tr>
                    <td>@activity.Id</td>
                    <td>@activity.Title</td>
                    <td>@activity.Description</td>
                    <td>@activity.Start</td>
                    <td>@activity.End</td>
                </tr>
            }
        </tbody>
    </table>
    <NavLink class="btn btn-primary" href="ActivityAdd">Create Activity</NavLink>
    <NavLink class="btn btn-primary" href="ActivityEdit">Edit Activity</NavLink>
    <NavLink class="btn btn-primary" href="ActivityDelete">Delete Activity</NavLink>
}

@if (Courses != null && Courses.Any())
{
    <h2>Courses</h2>
    <table class="table table-striped table-dark">
        <thead>
            <tr>
                <th scope="col">Id</th>
                <th scope="col">Title</th>
                <th scope="col">Description</th>
                <th scope="col">Start</th>
                <th scope="col">End</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var course in Courses.Take(10))
            {
                <tr>
                    <td>@course.Id</td>
                    <td>@course.Title</td>
                    <td>@course.Description</td>
                    <td>@course.Start</td>
                    <td>@course.End</td>
                </tr>
            }
        </tbody>
    </table>
    <NavLink class="btn btn-primary" href="CourseAdd">Create Course</NavLink>
    <NavLink class="btn btn-primary" href="CourseEdit">Edit Course</NavLink>
    <NavLink class="btn btn-primary" href="CourseDelete">Delete Course</NavLink>
}

@if (Modules != null && Modules.Any())
{
    <h2>Modules</h2>
    <table class="table table-striped table-dark">
        <thead>
            <tr>
                <th scope="col">Id</th>
                <th scope="col">Title</th>
                <th scope="col">Description</th>
                <th scope="col">Start</th>
                <th scope="col">End</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var module in Modules.Take(10))
            {
                <tr>
                    <td>@module.Id</td>
                    <td>@module.Title</td>
                    <td>@module.Description</td>
                    <td>@module.Start</td>
                    <td>@module.End</td>
                </tr>
            }
        </tbody>
    </table>
    <NavLink class="btn btn-primary" href="ModuleAdd">Create Module</NavLink>
    <NavLink class="btn btn-primary" href="ModuleEdit">Edit Module</NavLink>
    <NavLink class="btn btn-primary" href="ModuleDelete">Delete Module</NavLink>
}


 *@